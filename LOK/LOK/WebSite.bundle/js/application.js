// Generated by CoffeeScript 1.10.0
(function() {
  window.Application = {
    init: function() {
      this.setup_socket();
      return this.setup_chart();
    },
    requests_list: new Vue({
      el: '#requests_list',
      data: {
        list: []
      }
    }),
    thread_count: new Vue({
      el: '#thread_count',
      data: {
        count: 0
      }
    }),
    viewcontroller_path: new Vue({
      el: '#viewcontroller_path',
      data: {
        path: ""
      }
    }),
    setup_socket: function() {
      var _this;
      _this = this;
      this.socket = new WebSocket("ws://192.168.10.113:12356");
      this.socket.onopen = function() {
        return _this.socket.send('hello world!');
      };
      this.socket.onmessage = function(event) {
        var data;
        data = JSON.parse(event.data);
        switch (data["type"]) {
          case "request":
            _this.handle_request(data["data"]);
            break;
          case "usage":
            _this.handle_usage(data["data"]);
            break;
        }
      };
      return this.socket.onclose = function() {
        console.log('Lost connection! Maybe server is close.');
        return setTimeout(function() {
          return _this.setup_socket();
        }, 100);
      };
    },
    handle_request: function(data) {
      window.xx = this.requests_list;
      return this.requests_list.list.unshift(data);
    },
    handle_usage: function(data) {
      this.thread_count.count = data.thread_count;
      this.viewcontroller_path.path = data.viewcontroller_path;
      if (this.memory_chart.getContext) {
        this.setup_chart();
        return;
      }
      this.cpu_data.datasets[0].data.push(data.cpu_usage);
      this.cpu_chart.addData([data.cpu_usage], '');
      if (this.cpu_chart.datasets[0].points.length > this.chart_max_count) {
        this.cpu_chart.removeData();
      }
      this.cpu_chart.update();
      this.memory_data.datasets[0].data.push(data.memory_usage);
      this.memory_chart.addData([data.memory_usage >> 20], '');
      if (this.memory_chart.datasets[0].points.length > this.chart_max_count) {
        this.memory_chart.removeData();
      }
      this.memory_chart.update();
      this.fps_data.datasets[0].data.push(data.fps);
      this.fps_chart.addData([data.fps], '');
      if (this.fps_chart.datasets[0].points.length > this.chart_max_count) {
        this.fps_chart.removeData();
      }
      return this.fps_chart.update();
    },
    setup_chart: function() {
      var cpu_ctx, fps_ctx, memory_ctx, option;
      $.each($('canvas'), function() {
        var el;
        el = $(this);
        return el.attr({
          "width": el.parent().width(),
          "height": 200
        });
      });
      option = {
        pointDot: false
      };
      cpu_ctx = $("#cpu_chart").get(0).getContext("2d");
      this.cpu_chart = new Chart(cpu_ctx).Line(this.cpu_data, {
        scaleLabel: "<%=value%>%",
        pointDot: false
      });
      memory_ctx = $("#memory_chart").get(0).getContext("2d");
      this.memory_chart = new Chart(memory_ctx).Line(this.memory_data, {
        scaleLabel: "<%=value%>MB",
        pointDot: false
      });
      fps_ctx = $("#fps_chart").get(0).getContext("2d");
      return this.fps_chart = new Chart(fps_ctx).Line(this.fps_data, option);
    },
    event_bind: function() {
      $('.nav-tabs a').click(function(e) {
        e.preventDefault();
        return $(this).tab('show');
      });
      return $(window).bind('beforeunload', function(e) {
        var message;
        message = false;
        if (true) {
          message = "Are you sure to leave? make sure you backup the test data.";
          e.returnValue = message;
        } else {
          return;
        }
        return message;
      });
    },
    chart_max_count: 150,
    cpu_data: {
      labels: [],
      datasets: [
        {
          fillColor: "rgba(151,187,205,0.2)",
          strokeColor: "rgba(151,187,205,1)",
          data: []
        }
      ]
    },
    memory_data: {
      labels: [],
      datasets: [
        {
          backgroundColor: "#F7464A",
          fillColor: "rgba(216,165,159,0.5)",
          strokeColor: "rgba(216,165,159,1)",
          scaleLabel: "<%=value%>MB",
          data: []
        }
      ]
    },
    fps_data: {
      labels: [],
      datasets: [
        {
          fillColor: "rgba(151,187,205,0.2)",
          strokeColor: "rgba(151,187,205,1)",
          data: []
        }
      ]
    }
  };

  Chart.defaults.global = {
    animation: true,
    animationSteps: 60,
    animationEasing: "easeOutQuart",
    showScale: true,
    scaleOverride: false,
    scaleSteps: null,
    scaleStepWidth: null,
    scaleStartValue: null,
    scaleLineColor: "rgba(0,0,0,.1)",
    scaleLineWidth: 1,
    scaleShowLabels: true,
    scaleLabel: "<%=value%>",
    scaleIntegersOnly: false,
    scaleBeginAtZero: false,
    scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
    scaleFontSize: 12,
    scaleFontStyle: "normal",
    scaleFontColor: "#666",
    responsive: true,
    maintainAspectRatio: true,
    showTooltips: false,
    customTooltips: false,
    tooltipEvents: ["mousemove", "touchstart", "touchmove"],
    tooltipFillColor: "rgba(0,0,0,0.8)",
    tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
    tooltipFontSize: 14,
    tooltipFontStyle: "normal",
    tooltipFontColor: "#fff",
    tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
    tooltipTitleFontSize: 14,
    tooltipTitleFontStyle: "bold",
    tooltipTitleFontColor: "#fff",
    tooltipYPadding: 6,
    tooltipXPadding: 6,
    tooltipCaretSize: 8,
    tooltipCornerRadius: 6,
    tooltipXOffset: 10,
    tooltipTemplate: "",
    multiTooltipTemplate: "",
    onAnimationProgress: null,
    onAnimationComplete: null
  };

  $(function() {
    return Application.init();
  });

}).call(this);
