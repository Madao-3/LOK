// Generated by CoffeeScript 1.10.0
(function() {
  var get_tr_template, setup_chart, setup_socket;

  $(function() {
    setup_socket();
    setup_chart();
    return $(window).bind('beforeunload', function(e) {
      var message;
      message = false;
      if (true) {
        message = "Are you sure to leave? make sure you backup the test data.";
        e.returnValue = message;
      } else {
        return;
      }
      return message;
    });
  });

  get_tr_template = function() {
    var _this;
    _this = this;
    if (!this.tr_template) {
      $.get('./partials/tr_item.json', function(data) {
        _this.tr_template = data;
        return Mustache.parse(_tr_template);
      });
    }
    return this.tr_template;
  };

  setup_socket = function() {
    var handle_request, handle_usage, socket;
    socket = new WebSocket('ws://192.168.10.36:12356');
    socket.onopen = function() {
      return socket.send('hello world!');
    };
    socket.onmessage = function(event) {
      var data;
      console.log(window.r = event);
      data = JSON.parse(event.data);
      switch (data["type"]) {
        case "request":
          return handle_request(data["data"]);
        case "usage":
          return handle_usage(data["data"]);
      }
    };
    socket.onclose = function() {
      return console.log('Lost connection! Maybe server is close.');
    };
    handle_request = function(data) {
      var el;
      data["limitLength"] = function() {
        return function(text, render) {
          return render(text).substr(0, 40) + '...';
        };
      };
      el = Mustache.render(get_tr_template(), data);
      return $('table tbody').prepend(el);
    };
    return handle_usage = function(data) {
      window.cpu_chart.addData([data.cpu_usage], '');
      window.cpu_chart.update();
      window.memory_chart.addData([data.memory_usage >> 20], '');
      return window.memory_chart.update();
    };
  };

  setup_chart = function() {
    var cpu_ctx, memory_ctx;
    cpu_ctx = $("#cpu_chart").get(0).getContext("2d");
    window.cpu_chart = new Chart(cpu_ctx).Line(window.cpu_data, {
      animation: false
    });
    memory_ctx = $("#memory_chart").get(0).getContext("2d");
    return window.memory_chart = new Chart(memory_ctx).Line(window.memory_data, {
      animation: false
    });
  };

  window.cpu_data = {
    labels: [],
    datasets: [
      {
        label: "CPU dataset",
        fillColor: "rgba(151,187,205,0.2)",
        strokeColor: "rgba(151,187,205,1)",
        pointColor: "rgba(151,187,205,1)",
        pointStrokeColor: "#fff",
        pointHighlightFill: "#9c0001",
        pointHighlightStroke: "rgba(151,187,205,1)",
        data: []
      }
    ]
  };

  window.memory_data = {
    labels: [],
    datasets: [
      {
        label: "CPU dataset",
        fillColor: "rgba(151,187,205,0.2)",
        strokeColor: "rgba(151,187,205,1)",
        pointColor: "rgba(151,187,205,1)",
        pointStrokeColor: "#fff",
        pointHighlightFill: "#9c0001",
        pointHighlightStroke: "rgba(151,187,205,1)",
        data: []
      }
    ]
  };

}).call(this);
